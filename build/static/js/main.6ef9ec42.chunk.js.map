{"version":3,"sources":["components/MoviesList.js","App.js","serviceWorker.js","index.js"],"names":["MoviesList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","movies","liveCount","_this2","socket","socketIOClient","on","socketId","id","concat","data","console","log","setState","latestMovies","removeAllListeners","off","satets","setTimeout","setup","bind","movieList","map","movie","react_default","a","createElement","key","alt","title_long","src","small_cover_image","rating","genres","join","className","Component","App","components_MoviesList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+QA6DeA,cAxDb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACC,OAAQ,GAAIC,UAAU,GAFpBT,uEAKV,IAAAU,EAAAP,KACAQ,EAASC,IAT0D,KAUzED,EAAOE,GAAG,UAAW,WACnB,IAAMC,EAAWH,EAAOI,GACxBJ,EAAOE,GAAP,QAAAG,OAAkBF,GAAY,SAACG,GAC7BC,QAAQC,IAAI,cAAcF,GAC1BP,EAAKU,SAAS,CAAEZ,OAAQS,EAAKI,iBAE/BH,QAAQC,IAAI,qCAAsCR,EAAOI,GAAIJ,GAC7DA,EAAOE,GAAG,YAAa,SAACI,GAEtBP,EAAKU,SAAS,CAAEZ,OAAQS,EAAKI,iBAE/BV,EAAOE,GAAG,YAAa,SAACI,GACtBP,EAAKU,SAAS,CAAEX,UAAUQ,EAAKR,gBAGnCE,EAAOE,GAAG,aAAc,WACtB,IAAMC,EAAWH,EAAOI,GACxBJ,EAAOW,mBAAmB,aAC1BX,EAAOW,mBAAP,QAAAN,OAAkCF,IAClCH,EAAOW,mBAAP,aACAX,EAAOY,IAAP,SAAAP,OAAoBF,IACpBH,EAAOY,IAAI,aACXZ,EAAOY,IAAP,aACAL,QAAQC,IAAI,mEAIEpB,EAAOyB,GACvBC,WAAWtB,KAAKuB,MAAMC,KAAKxB,MAAO,sCAKjC,IAAIyB,EAAYzB,KAAKI,MAAMC,OAAOqB,IAAI,SAACC,GAErC,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,EAAMf,IAAf,IAAoBgB,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,WAAYC,IAAKP,EAAMQ,oBAA3D,IAAkFR,EAAMM,WAAxF,MAAuGN,EAAMS,OAA7G,IAAsHT,EAAMU,OAAOC,UAE7I,OACEV,EAAAC,EAAAC,cAAA,OAAKS,UAAU,aACZX,EAAAC,EAAAC,cAAA,8BAAsB9B,KAAKI,MAAME,UAAjC,KACAsB,EAAAC,EAAAC,cAAA,UACEL,WAjDce,aCSVC,mLARX,OACEb,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACbX,EAAAC,EAAAC,cAAEY,EAAF,cAJUF,aCSEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6ef9ec42.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport socketIOClient from \"socket.io-client\";\r\nlet socketUrl = process.env.NODE_ENV==='development'?'http://localhost:3001':'/';\r\n\r\nclass MoviesList extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {movies: [], liveCount:0};\r\n  }\r\n\r\n  setup() {\r\n    const socket = socketIOClient(socketUrl);\r\n    socket.on('connect', () => {\r\n      const socketId = socket.id;\r\n      socket.on(`init-${socketId}`, (data)=>{\r\n        console.log('init called',data);\r\n        this.setState({ movies: data.latestMovies});\r\n      })\r\n      console.log('Client => Connected => Server ID=>', socket.id, socket);\r\n      socket.on(\"newmovies\", (data) => {;\r\n        // this.setState({movies:[...this.state.movies,data.latestMovies]});\r\n        this.setState({ movies: data.latestMovies });\r\n      });\r\n      socket.on(\"liveCount\", (data) => {;\r\n        this.setState({ liveCount:data.liveCount });\r\n      });\r\n    });\r\n    socket.on('disconnect', () => {\r\n      const socketId = socket.id;\r\n      socket.removeAllListeners(\"newmovies\");\r\n      socket.removeAllListeners(`init-${socketId}`);\r\n      socket.removeAllListeners(`liveCount`);\r\n      socket.off(`ini t-${socketId}`)\r\n      socket.off(\"newmovies\")\r\n      socket.off(`liveCount`)\r\n      console.log(\"Socket Disconnected\");\r\n    });\r\n  }\r\n\r\n  componentDidMount(props, satets) {\r\n    setTimeout(this.setup.bind(this), 1000);\r\n  }\r\n\r\n  \r\n  render() {\r\n     let movieList = this.state.movies.map((movie) =>{\r\n      //  console.log('new => ',movie.title);\r\n       return <li key={movie.id}> <img alt={movie.title_long} src={movie.small_cover_image} /> {movie.title_long} - {movie.rating} {movie.genres.join()}</li>;\r\n     })\r\n    return (\r\n      <div className=\"MovieList\">\r\n         <h2>hello MovieLis2 ({this.state.liveCount})</h2>\r\n         <ul>\r\n          {movieList}\r\n         </ul>\r\n      </div>\r\n    );\r\n    \r\n  }\r\n}\r\n\r\nexport default MoviesList;","import React, { Component } from 'react';\nimport MoviesList from './components/MoviesList';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        < MoviesList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}